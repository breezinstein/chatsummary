using System.Text;
namespace Breeze.ChatSummary
{
    // This class represents the main program for retrieving and summarizing messages from a matrix room
    internal class Program
    {
        private static ProgramSettings? settings;
        private static IMessageAnalyzer? messageAnalyzer;

        // Entry point of the program
        private static async Task Main(string[] args)
        {
            //Getting settings from jsonfile
            settings = new ProgramSettings().LoadFromJSON("settings.json").Validate();
            if (settings == null)
            {
                Console.WriteLine("Settings file not found or improperly configured");
                return;
            }

            //Create Analyzer
            switch (settings.API)
            {
                case APIType.AZURE:
                    messageAnalyzer = new AzureTextAnalyzer(settings.AzureAPI);
                    break;
                case APIType.OLLAMA:
                    messageAnalyzer = new OllamaAnalyzer(settings.OllamaApi);
                    break;
                case APIType.CLAUDE:
                    messageAnalyzer = new ClaudeMessageAnalyzer(settings.ClaudeApi.API_KEY);
                    break;
                default:
                    Console.WriteLine("No valid analyzer configured, please configure Azure API or Ollama in settings.json");
                    return;
            }



            MatrixMessageExtractor extractor = new MatrixMessageExtractor(settings.MatrixConfig, settings.MatrixConfig.SOURCE_ROOM_ID);

            Console.WriteLine("Getting Messages...");
            Dictionary<DateTime, MatrixMessageGroup> hourlyMessages = await extractor.GetMessagesByHour();
            List<MatrixMessageGroup> groupedMessages;
            DateTime date = DateTime.Now.AddDays(-1);

            Console.WriteLine("Grouping Messages...");
            groupedMessages = GroupMessagesByAmount(hourlyMessages, 1000, date);

            Console.WriteLine("Analyzing Text...");
            string output = await AnalyzeMessages(messageAnalyzer, groupedMessages);
            Console.WriteLine(output);

            await PostMessage(groupedMessages, output, settings.OllamaApi);

        }

        private static List<MatrixMessageGroup> GetAmountOfMessages(Dictionary<DateTime, MatrixMessageGroup> hourlyMessages, int amount)
        {
            return hourlyMessages.Values.ToList().GetRange(0, amount);
        }

        private static async Task PostMessage(List<MatrixMessageGroup> groupedMessages, string output, OLLAMAAPI ollamaAPI)
        {
            Console.WriteLine($"Posting to {settings.MatrixConfig.DESTINATION_ROOM_ID}");
            IMessagePoster poster = new MatrixMessagePoster(settings.MatrixConfig);
            output += "\nDISCLAIMER:Please be aware that text generated by AI can be inaccurate!";
            await poster.PostMessageAsync(output, settings.MatrixConfig.DESTINATION_ROOM_ID);
        }

        private static async Task<string> AnalyzeMessages(IMessageAnalyzer messageAnalyzer, List<MatrixMessageGroup> groupedMessages)
        {
            if (groupedMessages.Count == 0)
            {
                return string.Empty;
            }
            string output = $"Summary of {groupedMessages.Sum(x => x.Count)} messages on {groupedMessages[0].earliestMessageTimeStamp:D}\n";
            output += $"First message at {groupedMessages[0].earliestMessageTimeStamp.ToString("T")}\n";
            output += $"Last message at {groupedMessages[groupedMessages.Count - 1].latestMessageTimeStamp.ToString("T")}\n";
            //output += $"Total Messages: {groupedMessages.Sum(x => x.Count)}\n";
            output += "\n";
            foreach (var group in groupedMessages)
            {
                output += $"{group.Count} Messages between {group.duration}\n";
                output += await messageAnalyzer.AnalyzeTextAsync(group.value);
                output += "\n\n";
            }

            return output;
        }

        // Method to combine multiple MatrixMessageGroup objects into a smaller number of MatrixMessageGroup objects by ensuring that each object has a maximum number of messages
        private static List<MatrixMessageGroup> GroupMessagesByAmount(Dictionary<DateTime, MatrixMessageGroup> dictionary, int maxAmountPerEntry, DateTime dateToGroup)
        {
            List<MatrixMessageGroup> groupedMessages = new List<MatrixMessageGroup>();
            MatrixMessageGroup currentGroup = new MatrixMessageGroup();

            foreach (var item in dictionary)
            {
                if (item.Key.Date != dateToGroup.Date)
                {
                    continue;
                }
                if (currentGroup.Count + item.Value.Count <= maxAmountPerEntry)
                {
                    currentGroup = currentGroup + item.Value;
                }
                else
                {
                    groupedMessages.Add(currentGroup);
                    currentGroup = new MatrixMessageGroup();
                    currentGroup = item.Value;
                }
            }
            if (currentGroup.Count > 0)
            {
                groupedMessages.Add(currentGroup);
            }

            foreach (var item in groupedMessages)
            {
                item.UpdateDuration();
            }

            return groupedMessages;

        }

    }
}